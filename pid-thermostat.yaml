blueprint:
  name: PID-thermostat
  description: >
    Плавное управление диммером (ИК-лампой) для поддержания температуры в террариуме.

  domain: automation
  input:
    temp_sensor:
      name: Датчик температуры
      selector:
        entity:
          domain: sensor
          device_class: temperature

    ir_dimmer:
      name: Диммер (ИК-лампа)
      selector:
        entity:
          domain: light

    target_temp:
      name: Уставка температуры (°C)
      selector:
        entity:
          domain: input_number

    max_temp:
      name: Максимальная температура (°C)
      description: "При достижении этой температуры лампа выключится"
      default: 42
      selector:
        number:
          min: 30
          max: 60
          step: 0.5

    integral_var:
      name: Переменная интеграла (input_number)
      selector:
        entity:
          domain: input_number

    last_error_var:
      name: Переменная последней ошибки (input_number)
      selector:
        entity:
          domain: input_number

    kP:
      name: P-коэффициент PID
      default: 5
      selector:
        number:
          min: 0.1
          max: 25.0
          step: 0.1
          mode: slider

    kI:
      name: I-коэффициент PID
      default: 0
      selector:
        number:
          min: 0.01
          max: 1.0
          step: 0.01
          mode: slider

    kD:
      name: D-коэффициент PID
      default: 0
      selector:
        number:
          min: 0.01
          max: 10.0
          step: 0.1
          mode: slider

mode: restart

trigger:
  - platform: time_pattern
    seconds: "/10"

variables:
  kP: !input kP
  kI: !input kI
  kD: !input kD

  temp_sensor_entity: !input temp_sensor
  target_temp_entity: !input target_temp
  last_error_entity: !input last_error_var
  integral_entity: !input integral_var
  ir_dimmer_entity: !input ir_dimmer
  max_temp_value: !input max_temp

  current_temp: "{{ states(temp_sensor_entity) | float(0) }}"
  target: "{{ states(target_temp_entity) | float(0) }}"
  error: "{{ (states(target_temp_entity) | float(0)) - (states(temp_sensor_entity) | float(0)) }}"
  prev_error: "{{ states(last_error_entity) | float(0) }}"
  integral: "{{ (states(integral_entity) | float(0)) + error * 10 }}"
  derivative: "{{ (error - prev_error) / 10 }}"

  output: >
    {% set value = (kP * error + kI * integral + kD * derivative) | round(0) %}
    {% if value < 0 %} 0
    {% elif value > 100 %} 100
    {% else %} {{ value }}
    {% endif %}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ current_temp >= max_temp_value }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: "{{ ir_dimmer_entity }}"
          - service: input_number.set_value
            data:
              entity_id: "{{ integral_entity }}"
              value: 0
          - service: input_number.set_value
            data:
              entity_id: "{{ last_error_entity }}"
              value: 0
          - service: system_log.write
            data:
              level: warning
              message: "🚨 PID: Перегрев! T={{ current_temp }}°C >= {{ max_temp_value }}°C — лампа выключена."

      - conditions:
          - condition: template
            value_template: "{{ current_temp < max_temp_value }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ ir_dimmer_entity }}"
            data:
              brightness_pct: "{{ output }}"

          - service: input_number.set_value
            data:
              entity_id: "{{ integral_entity }}"
              value: "{{ integral | round(2) }}"

          - service: input_number.set_value
            data:
              entity_id: "{{ last_error_entity }}"
              value: "{{ error | round(2) }}"

          - service: system_log.write
            data:
              level: info
              message: >
                PID: T={{ current_temp }}°C,
                Target={{ target }}°C,
                Error={{ error | round(2) }},
                Out={{ output }}%.