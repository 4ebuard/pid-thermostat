blueprint:
  name: PID-thermostat
  description: >
    Плавное управление диммером (ИК-лампой) для поддержания температуры в террариуме.

  domain: automation
  input:
    temp_sensor:
      name: Датчик температуры
      selector:
        entity:
          domain: sensor
          device_class: temperature

    ir_dimmer:
      name: Диммер (ИК-лампа)
      selector:
        entity:
          domain: light

    target_temp:
      name: Уставка температуры (°C)
      default: 39
      selector:
        number:
          min: 30.0
          max: 42.0
          step: 0.2
          unit_of_measurement: "°C"
          mode: slider

    max_temp:
      name: Максимальная температура (°C)
      description: "При достижении этой температуры лампа выключится"
      default: 42
      selector:
        number:
          min: 30
          max: 60
          step: 0.5

    kP:
      name: P-коэффициент PID
      description: P (пропорциональная) - реагирует на текущую ошибку
      default: 5
      selector:
        number:
          min: 0.1
          max: 25.0
          step: 0.1
          mode: slider
    kI:
      name: I-коэффициент PID
      description: I (интегральная) - устраняет долговременные отклонения
      default: 0
      selector:
        number:
          min: 0.01
          max: 1.0
          step: 0.01
          mode: slider
    kD:
      name: D-коэффициент PID
      description: D (дифференциальная) - предсказывает будущие изменения
      default: 0
      selector:
        number:
          min: 0.01
          max: 10.0
          step: 0.1
          mode: slider
    check_interval:
      name: "Интервал проверки (сек)"
      default: 60
      selector:
        number:
          min: 10
          max: 300

mode: restart
trigger:
  - platform: time_pattern
    seconds: "10"

variables:
  current_temp: "{{ states(temp_sensor) | float }}"
  target_temp: "{{ states(target_temp) | float }}"
  last_temp: "{{ current_temp }}"
  integral: 0
  max_integral: 1000
  pid_output: >
    {% set error = target_temp - current_temp %}
    {% set integral = integral + error * check_interval %}
    {% set integral = [max_integral, integral] | min %}
    {% set integral = [-max_integral, integral] | max %}
    {% set derivative = (current_temp - last_temp) / check_interval %}
    {% set output = (kP * error - kI * integral - kD * derivative) | round(0) %}
    {% if output < 0 %} 0
    {% elif output > 100 %} 100
    {% else %} {{ output }}
    {% endif %}

action:
  - choose:
      # Аварийное отключение при перегреве
      - conditions:
          - condition: template
            value_template: "{{ current_temp >= max_temp }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: "{{ ir_lamp }}"
          - variables:
              integral: 0  # Сброс интеграла
          - delay: "00:05:00"  # Пауза 5 минут
    
      # Нормальный режим работы
      - conditions:
          - condition: template
            value_template: "{{ current_temp < max_temp }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ ir_lamp }}"
            data:
              brightness_pct: "{{ pid_output }}"
